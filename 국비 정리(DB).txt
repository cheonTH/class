JDK(Java Development Kit)
DBeaver 자체가 Java를 기반으로 만들어짐

벤더사가 많음
Oracle, amazon...

드라이버(driver) : 하드웨어와 운영체제가 통신할 수 있도록 해주는 프로그램

테이블을 삭제하고 다시 만드는 방법도 잇으나 데이터가 이미 들어가있을때 삭제하는 것은 거의 불가능

ALTER TABLE이라는 명령어를 통해 테이블을 수정할 수 있음

데이터베이스
관계형 데이터베이스
ㄴ> 행과 열로 이루어진 테이블(표)
ㄴ> 다양한 용도로 사용 가능
ㄴ> 대량의 데이터 입력처리

★스키마의 개념 ----> 시험 나올 확률 매우 높음
개념스키마 : 전체적인 뷰
- 조직체 전체를 관장하는 입장에서 DB를 정의한 것
- 관계, 제약조건, 접근권한, 보안정책, 무결성 규칙에 관한 사항을 포함하고 있다.
- 따라서 개념스키마를 '스키마'라고 칭하기도 하며, DB전체를 기술한것이기 때문에 한 개밖에 존재할 수 없다.

내부스키마 : 물리적인 저장장치 입장에서 DB가 저장되는 방법을 기술한 것
- 구체적인 개념으로 스키마를 디스크 기억장치에 물리적으로 구현하기 위한 방법을 기술한 것
- 데이터베이스의 물리적 저장구조를 정의
- 디스크에 어떤 구조로 저장할 것인가
- 데이터의 실제 저장방법을 기술
- 물리적인 저장장치와 밀접한 계층
- 시스템 프로그래머나 시스템 설계자가 보는 관점의 스키마

외부스키마 : 사용자 뷰
- 사용자나 응용 프로그래머가 개인의 입장에서 필요한 데이터베이스의 논리적 구조를 정의
- 실세계에 존재하는 데이터들을 어떤 형식, 구조, 배치 화면을 통해 사용자에게 보여줄 것인가
- 전체 데이터베이스의 한 논리적 부분 -> 서브 스키마
- 하나의 데이터베이스에는 여러 개의 외부 스키마가 존재할 수 있다.
- 예를들어 '운전면허시험'에 대한 전반적인 정보를 얻고자 할 때, 누구는 '운전면허시험'이라고 검색하고, 누구는 '운전면허증', 누군가는 '운전면허필기시험'이라고 검색할 것이다.
- 이것이 외부 스키마는 여러개 존재할 수 있다는 의미이다.
- 응용 프로그래머는 C,JAVA등의 언어를 이용해서 DB에 접근한다.

개념 스키마
전체적인 관리자 관점
내부 스키마
물리적인 저장에 대한 관점
외부 스키마
사용자 관점 (개발자 포함)

완전 함수 종속
PK를 가지고 나머지 값을 알 수 있음
Ex) 주민번호 하나를 가지고 이름, 나이, 주소를 알 수 있음

부분 함수 종속
여러개의 컬럼으로 PK가 이루어져있을 때 PK중 하나의 속성만으로도 종속성이 성립할 때
EX) 사원번호와 부서번호로 이루어진 PK가 있을 때 사원번호 만으로도 이름, 주소, 전화번호를 알 수 있음

이행 함수 종속
X -> Y Y ->Z 일때 X -> Z를 결정해버리는 종속성
EX) 사원번호를 통해 이름을 알 수 있고 이름을 통해 주소를 알 수 있을때 사원번호를 통해 주소를 알 수 있음

함수적 종속성을 제거하는 과정 -> 정규화
비정규화 상태
1차 정규화 - 도메인은 원자값이어야 함
2차 정규화 - 1NF(1차 정규화)를 만족하고 부분함수 종속을 제거해야함
2차 정규화 - 1,2NF를 만족하고 이행함수 종속을 제거해야함

정규화를 너무 많이하면 테이블이 많이 쪼개져 쿼리문을 작성하는데 더 힘들어짐 -> 조회 시간이 더 길이질 수 있음.

이상현상과 정규화
삽입이상: 필요없는 데이터도 넣어야함
갱신이상: 전부다 갱신되지 않아서 정확하지 않을 수 있음
삭제이상: 필요한 정보까지 삭제해버릴 수 있음

함수적 종속성
완전 함수 종속이 되도록 만들어야함
부분함수 종속
이행함수 종속

