1.(풀이 참조)
<풀이>
기본형은 stack에 저장
참조형은 heap에 저장

2.
조건만족
a: 6, b: 11

3.
오류 발생 -> 동일한 이름의 메서드가 매개변수의 개수도 동일하게 정의됨(오버로딩 규칙 위배)

4.
public class Student {
	String name;
	int age;
	public Student(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	public void printInfo() {
		System.out.println("이름 : " + name + ", 나이 : " + age + "세");
	}	
}

5.(풀이 참조)
매개변수로 주소의 값을 복사하여 전달하기 때문에 메서드 안에서도 그 참조값을 통해 같은 객체의 필드에 접근 및 변경이 가능함

6.(풀이 참조)
-100
<풀이>
Box a = new Box(); a.value = 10; -> 힙에 value = 10인 Box객체 생성
변수 a는 박스 객체의 주소값이 들어있음
change(a) 호출시 매개변수  b는 a와 같은 객체를 참조
b.value = 100; -> a.value도 100 =>이유 : 같은 객체이기 때문
메서드 안에서 b = new Box(); -> B는 새로운 객체를 참조 a는 여전히 원래 객체를 참조
b.value = 200; -> b.value가 200이지만 주소가 다르므로 a는 여전히 100

따라서 System.out.println(a.value); -> 100이 출력됨


7.
- this는 같은 클래스 내의 다른 생성자나 필드를 참조할 때 사용
- super는 부모 클래스의 생성자 또는 멤버에 접근할 때 사용

8. 
-overloading은 같은 클래스에서 같은 이름의 메서드를 사용하기 위해 매개변수의 개수를 다르게 하는 것
 (메서드의 중복 정의, 매개변수의 개수가 다르거나 타입이 다르거나 순서가 달라야함)

-overriding은 부모클래스를 상속 받을 때 메서드를 상속받아 재정의하는 것 
(메서드의 재정의, 상속관계에서만 사용 가능, 내용 빼고는 다 같아야함)

9.
추상클래스는 단일 상속만 가능한 반면 (추상클래스는 상속의 발전된 형태 -> 자식에게 상태와 기능을 줄 수 있음)
인터페이스는 다중 상속이 가능하다 (인터페이스는 관계가 없는 것들에게도 기능을 전수해줄 수 있음)

10.
2. B

11.
함수형 인터페이스
@FunctionalInterface
public interface String_word {
	abstract String word(String s);
}

메인
String_word words = x -> x.toUpperCase();
        
        String str = "hello";
        str = words.word(str);
        
        System.out.println(str);

12.
import java.util.Arrays;
import java.util.List;

public class Words_length {
	public static void main(String[] args) {
		List<String> words = Arrays.asList("apple", "dog", "banana", "cat", "grape");
		
		words.stream()
			.filter(x -> x.length() >= 4)
			.sorted()
			.forEach(System.out::println);
	}
}

13. - 1
Bob

13 - 2
void function(T i){
        System.out.print(a);
    } 이 코드에서 T가 정의되지 않았으므로 오류
t.function(1.0)에서 오류

오류 안나는 것들의 결과
-560

14.
참조하는 대상은 같다 그 이유는 p1과 p2가 주소 값을 공유하기 때문이다

15.
Vehicle name: Spark

16.
Map<String, Integer> scores = new HashMap<>();
        scores.put("Alice", 85);
        scores.put("Bob", 72);
        scores.put("Charlie", 90);
        
        for(Map.Entry<String, Integer> entryScore : scores.entrySet()) {
        	if(entryScore.getValue() >= 80) {
        		System.out.println("이름 : " + entryScore.getKey() + ", 점수 : " + entryScore.getValue());
        	}
        }

17.
클래스
public class StudentScore {
	int kor;
	int eng;
	int math;
	

	public int getKor() {
		return kor;
	}

	public void setKor(int kor) {
		this.kor = kor;
	}

	public int getEng() {
		return eng;
	}

	public void setEng(int eng) {
		this.eng = eng;
	}

	public int getMath() {
		return math;
	}

	public void setMath(int math) {
		this.math = math;
	}


메인
Map<String, Double> studentMap = new HashMap<>();
        
        Scanner scanf = new Scanner(System.in);
        String name = null;
        int kor = 0;
        int eng = 0;
        int math = 0;
        
        boolean check = false;
        
        int sum = 0;
        double avg = 0.0;
        
        while(!check) {
        	StudentScore stu = new StudentScore();
        	System.out.println("이름 입력(exit는 종료): ");
        	name = scanf.next();
        	if(name.equalsIgnoreCase("exit")) {
        		System.out.println("프로그램을 종료합니다");
        		break;
        	}
        	System.out.print("국어점수: ");
        	kor = scanf.nextInt();
        	stu.setKor(kor);
        	
        	System.out.print("수학점수: ");
        	math = scanf.nextInt();
        	stu.setMath(math);
        	
        	System.out.print("영어점수: ");
        	eng = scanf.nextInt();
        	stu.setEng(eng);
        	
        	sum = stu.getKor() + stu.getEng() + stu.getMath();
        	avg = sum/3;
        	
        	studentMap.put(name, avg);
        }
        
        Iterator<String> iterr = studentMap.keySet().iterator();
		while (iterr.hasNext()) {
			String key   = itor.next();
			Double value = studentMap.get(key);
			
			System.out.println(key + " - " + value);
		}
        
        for(Map.Entry<String, Double> entry : studentMap.entrySet()) {
        	if(entry.getValue() >= 80.0) {
        		System.out.println("이름 : " + entry.getKey() + ", 평균 점수 : "  + entry.getValue());;
        	}
        }

