Servlet/JSP
우리가 만든 자바클래스를 서버쪽에서 실행
HTTP요청을 받아 동적으로 응답을 생성할 수도 있음
Servlet -> Java코드 기반 + html 얹어서 사용
JSP-> HTML기반 + Java코드를 삽입해서 동적으로 페이지를 쉽게 작성할 수 있도록 한 기술

서버 - 클라이언트 구조로 전환되어, Applet의 클라이언트 부담을 줄이고 서버에서 로직을 처리하게 됨

엔터프라이즈 자바(EJB)
- 분산, 트랜잭션, 보안 등 서버사이드 서비스를 제공하는 프레임워크
- 배우기가 어려움, 설정이 복잡하고 프로그램이 너무 무거움

Spring 프레임워크
EJB보다 가벼움, 아키텍처가 보다 유연해짐
xml, Java Config어노테이션 설정으로 확장성이 뛰어남

Spring boot
Spring에서 직접 해줘야 했던 설정들의 일부도 다 자동화가 됨
웹 서버를 내장하고 있음

백엔드는 화면이 없음 -> 콘솔을 통해서 확인, 데이터를 프론트엔드로 넘겨서 확인

포스트맨(Postman)
우리가 만든 기능을 테스트해볼 수 있는 프로그램



CSRF : 웹 어플리케이션에서 사용자가 의도치 않은 상태 변경 요청이 
공격자에 의해 자동으로 전송되도록 하는 공격 기법

start.spring.io
Group 이름은 같아도 되지만 Artifact는 달라야함
프로젝트 이름은 주로 Artifact와 비슷하게함



스프팅 부트 프로젝트의 구성
src/main/java : 서버단 java파일
test/main/java : 테스트하기위한 java파일
src/main/resources : 설정 파일 및 화면에 필요한 파일들
ㄴ> templates: html파일
ㄴ> static폴더: js, css파일
ㄴ> application.properties: 설정 코드가 들어감
build.gradle : 라이브러리 의존성 관리




@SpringBootApplication
@Configuration, @EnableAutoConfiguration, @ComponentScan 세 가지를 하나로 합친 것

@Configuration : 해당 클래스가 설정 파일임을 알려주는 용도
@EnableAutoConfiguration : 스프링의 다양한 설정이 자동으로 구성되고 완료됨
@ComponentScan : 자동으로 컴포넌트 클래스를 검색해서 컴포넌트와 빈(bean)클래스(객체)를 등록



스프링의 핵심 개념
1. Ioc(Inversion of Control, 제어역전)
객체의 생성과 관리를 개발자가 아닌 프레임워크나 컨테이너가 대신 관리하도록 하는 개념

전통적인 객체 지향 프로그래밍에서 객체 간의 의존성을 개발자가 직접 처리하는 반면
IoC는 이 흐름을 역전시켜 스프링 프레임워크와 같은 컨테이너가 객체 간의 의존성을 주입하고 관리함

IoC는 어플리케이션의 유연성과 유지보수성을 높이는데 기여하며 
스프링 프레임워크에서 가장 핵심적인 개념 중 하나

함수를 호출하는 애 -> 스프링
public User getUser(){ 
	return new User();
}
getUser() 호출했을 때 user객체를 얻을 수 있음

	IoC의 주요 개념
	1. 의존성 주입(Dependency Injection, DI)
	- 객체를 직접 대입하는 것이 아니라 외부에서 필요한 의존성을 주입하는 방식임

	2. 제어의 역전
	- 전통적으로는 개발자가 직접 객체를 생성하고 관리해야하지만 
	  IoC에서는 객체의 생성과 생명주기를 스프링이 관리함

	  즉 개발자가 아니라 프레임 워크가 객체의 생명 주기를 관리하는 방식


