[환경변수]
프로그램이 컴퓨터에서 동작하는 방식에 영향을 미치는 동적인 값들의 모임

jdk를 윈도우가 인식 못할 때
환경변수를 설정해주면 됨

java8 , 11, 17, 21

이미 만들어진 프로젝트의 경우는 8버전일 수 있음
새로 시작하는 경우는 11, 17을 사용할 수도 있음

LTS(Long Term Service)
- 장기간 안정적인 지원을 받을 수 있는 버전
- 실무에선느 LTS버전을  선호하는 경향이 있음
- 보안 패치와 성능개선을 지속적으로 받을 수 있다는 장점이 있기 때문

자바는 클래스라는 파일에 코드를 작성
관련된 기능이 있는 파일들끼리 묶어서 보관 -> 패키지

while
-몇번 반복해야 할지 모를때 사용하면 유용
-Ex) 숫자 맞추기 퀴즈(몇번만에 맞출 수 있나)
-조건을 검증하고 반복을 실행

do-while
반복을 1회 실행을 하고 조건을 검증

필드
ㄴ> 일반 필드 -> 객체마다의 상태(이름, 나이 ,직업, 키 등... 서로다른 객체)
ㄴ> 정적 필드 -> 객체 공통의 상태(눈, 코, 입, 귀, 손가락 등...)

메서드
ㄴ> 메서드는 메서드 안에서 정의할 수 없음
ㄴ> 메서드는 메서드 안에서만 호출할 수 있음

public: 같은 프로젝트 내에서 접근가능
private: 현재 클래스에서만 접근 가능
protected: 상속관계에서만 접근 가능
default: 현재 패키지에서만 접근 가능

반환형
반환값의 타입을 결정하는 키워드
반환형으로 올수있는 타입은 int, boolean, char 등 과 같은 기본자료형도 되고 개발자가 만든 클래스도 가능

상속
부모클래스 - 상위 개념, 일반적인 개념
자식클래스 - 하위개념, 구체적인 개념

extends키워드를 사용해야 자식관계가 성립이 됨
자식클래스 extends 부모클래스{

}

상속관계가 성립이 되면 객체가 만들어졌을때 부모의 필드나 메서드를 사용할 수 있음
ㄴ>자식의 생성자가 호출 될 때 부모의 생성자가 먼저 호출되기 때문

this -> 객체 자기 자신을 참조하는 변수
super -> 부모를 참조하는 변수

Child(){
   super(); -> 부모생성자의 호출
}

부모의 생성자가 매개변수를 가진다면
Parent(String name, int age){
   this.name = name;
   this.age = age
}

Child(String name, int age){
   super(name, age) -> 부모생성자의 호출(생력이 불가능)
}

오버라이드(Override)
부모에 정의된 메서드를 자식클래스가 재정의하는 것
오버라이드 규칙
1. 부모클래스의 메서드명, 반환타입, 매개변수가 동일해야함
2. 부모클래스의 메서드보다 접근 제한범위를 줄일 수 있음

인터페이스
상수 -> 한번 대입되면 바뀌지 않는 값
추상 메서드 -> 구현체({})가 없는 메서드
default메서드 -> default 접근 제한자를 가진 완전한 메서드

익명클래스
이름이 없는 클래스
일회성으로 사용되는 클래스를 간단하게 정의할 수 있음
인터페이스나 추상클래스의 구현을 간단하게 처리할 수 있음

함수형 인터페이스(@FunctionalInterface)
익명클래스보다 람다식이 더 간단하기 때문에 함수형 인터페이스를 사용할 때는 람다식을 더 권장함

직접 인터페이스를 만들 일은 적고, 자바에서 제공하는 인터페이스를 사용할 일 이 더 많음

Collection -> 자바에서 제공하는 인터페이스
↓
List, 		Set 		Map		-->인터페이스
↓		↓		↓
ArrayList		HashSet		HashMap		-->인터페이스의 구현 클래스
LinkedList	TreeSet
Vector

ArrayList -> 인덱스를 가지고 있음, 배열을 기반으로 동작, 배열과 다른점은 데이터를 넣은데로 들어감
ㄴ> 조회에는 유리함(index에 바로 접근함), 추가 / 삭제에는 불리함(상대적으로)

LinkedList -> 노드를 기반으로 동작
노드 : 데이터와 다음 노드의 주소를 가지고 있는 객체
인덱스가 없음, 조회는 불리, 추가 / 삭제에 유리

HashSet -> 인덱스가 없음, 정렬이 되지 않음, 중복이 없음

HashMap -> Key와 Value가 쌍으로 이루어져있음, 인덱스가 없음, 대량의 데이터를 저장할 때 좋음
컬렉션은 중첩해서 사용할 수 있음
ex) HashMap<String, List<String>> map


list, set
add() -> 데이터의 추가
set() -> 데이터의 수정
remove() -> 데이터의 삭제
clear() -> 컬렉션 내부의 데이터 전체 삭제
isEmpty() -> 비어있는지 판별
get() -> value값 가져오기

HashMap
put()
get()
getOfDefault()
putIfAbsent()
remove()
isEmpty()

람다식(lamda Expression)
함수를 값처럼 사용해서 변수에 대입할 수 있음
람다식을 작성하기 위해서는 함수형 인터페이스가 반드시 필요

Ex) public int add(int x, int y){
	return x + y;
     }	=> 원래 쓰던 함수

람다식
(int x, int y) -> {return x + y}
ㄴ>(x , y) -> {return x + y} //자료형을 생략할 수 있음
ㄴ>(x, y) -> x + y //return과 중괄호는 같이 생략할 수 있음
ㄴ>x -> System.out.println(x) //매개변수가 하나일 때는 소괄호도 생략이 가능함
System.out::println

우리가 직접 함수형 인터페이스를 생성할 수 있지만 컬렉션이 속해있는 메서드에 매개변수로 사용되는 일이 더 많음

람다식의 참조 연산자(::)
람다식을 더 간결하게 표현하기 위한 문법

s -> System.out.println  ==> System.out::println

종류와 형식
정적 메소드 참조 	
클래스명::정적메서드명  		Integer::parseint

인스턴스 메서드 참조	
참조변수::인스턴스메서드		System.out::println

특정 타입의 인스턴스 메서드
클래스명::인스턴스 메서드 		String::toUpperCase

생성자 참조
클래스명::new			ArrayList::new

스트림의 특징
데이터를 하나씩 순회에서 반복할거라면 iterator를 쓰면 되는데 왜 스트림을 써야하는 이유?
-> 데이터 처리 파이프라인을 구성해서 선언형으로 데이터를 처리할 수 있음

일반 반복
for(String name : names){
	if(name.length() > 3){
		System.out.println(name);
	}
}

선언형
name.stream().메서드().메서드().메서드()
ex) name.stream().filter().map().forEach()

내부반복
개발자가 반복을 제어하지 않고 스트림이 알아서 요소들을 반복하면서 처리하는 방법
어떻게 반복할지는 스트림이 정하고 반복하면서 무엇을 할지 정하면 됨

지연연산(Lazy Evaluation)
-중간 연산은 최종연산이 실행되기 전까지 아무일도 하지 않음
-최종연산이 호출될 때까지 연기되는 처리 방식 

불변성(Immutable)
-원본데이터는 변경하지 않음

일회성
-스트림은 최종연산이 끝나면 다시 중간연산을 할 수 없음

최종연산
스트림 파이프라인의 마지막에 실행되는 연산
스트림이 소비(consumed)되고 실제 데이터가 처리됨

중간 연산들을 실행하게 해주는 트리거이자, 스트림의 결과를 만드는 연산

특징
- 스트림을 종료시키며, 다시 사용할 수 없음
- 값을 반환함

ArrayList<T> : index가 있음 배열기반, 조회에 유리
HashSet<T> : index가 없음 순서가 없음 중복이 없음
HashMap<T> : key-value의 쌍으로 이루어져 있음

스레드
main이 실행될 때 동시에 실행하려고 하는 것

Thread상속
단일 상속만 가능
간단한 구현
Thread클래스를 직접 다룰수 있음

Runnable구현
다른 클래스 상속과 병행 가능
더 유연한 구조 가능
Runnable은 실행 코드만 담고 Thread는 별도로 생성

start()메서드 스레드를 시작(내부적으로 run() 호출)

스레드의 이름 , 상태 순위

main도 스레드
스레드 -> 작업의 흐름
하나의 프로그램 안에서 여러 작업을 동시에 실행할 수 있게 해주는 기술
하나의 프로그램에는 최소 1개의 스레드가 있음

우리가 인위적으로 스레드를 생성하는 것이 가능
1. Thread클래스를 상속받아서 생성
2. Runnable인터페이스를  구현

메인 작업과 별개로 동시에 작업을 하고 싶은 내용을 run()메서드 안에 작성

Runnable방식이 더 유연하고 실무에서도 많이 사용

스레드를 여러개 만들고 사용할 때 스레드가 공유하는 변수나 메서드에 접근하면 데이터 충돌 발생 가능성이 있음
하나의 스레드가 점유할 때는 다른 스레드가 사용할 수 없는 동기화(Synchronized)를 해야함

프로세스 안에 스레드가 1개면 -> 싱글 스레드
프로세스 안에 스레드가 여러개 -> 멀티 스레드

입출력 스트림

바이트 기반의 스트림 : byte 단위로 읽어옴
ㄴ> 이미지 음성 영상은 byte로 이루어진 데이터라서, 문자 인코딩을 적용하면 데이터가 손상될 수 있음
InputStream ->  FileInputStream

문자 기반의 스트림 : 문자열을 처리하도록 설계, 내부저긍로 문자 인코딩(UTF-8 등...)을 처리함


파일 입출력
외부 -> 자바 : input
자바 -> 외부 : output

FileReader는 기본적으로 운영체제의 기본 문자 인코딩을 사용해 파일을 읽음
그래서 한글을 별도의 처리 없이 읽을 수 있음

Writer -> FileWriter
ㄴ>write(): 문자열을 직접 쓰는 것이 가능

인코딩 : 컴퓨터가 문자를 숫자로 바꾸는 규칙

바이트 기반 보조스트림
BufferInputStream : 읽어오는 것
BufferOutputStream: 쓰는 것

어노테이션
프로그램의 소스코드안에 다른 프로그램을 위한 정보를 미리 약속된 형태로 포함시킨 것
주석처럼 프로그래밍 언어에 영향을 미치지 않으면서도 다른 프로그램에게 유용한 정보를 제공할 수 있다는 장점이 있음.

표준 어노테이션
-자바에서 제공하는 어노테이션

메타 어노테이션
-사용자 정의 어노테이션을 만들기 위한 어노테이션
@Target: 어노테이션이 적용될 수 있는 위치(필드, 메서드, 클래스 등)
@Retention: 어노테이션의 유지 범위를 지정(런타임, 컴파일 등)
@Documented: Javadoc문서에 어노테이션 정보 포함 여부
@Inherited: 자식 클래스에게 상속될 수 있는 어노테이션 여부

어노테이션 선언 시 규칙 정리
1. 선언 키워드 -> @Interface
public @interface MyAnnotation{
}

2. 어노테이션 속성은 메서드 형태로 정의를 함
-추상 메서드 형태로 정의를 해야함
public @interface MyAnnotation{
	String value();
	int version();
}

3. 속성의 반환 타입은 제한적임
기본타입, String, Class<?>, 열거형, 다른 어노테이션, 배열

4. 속성에 기본값을 정의할 수 있음
public @interface MyAnnotation{
	String value() default "홍길동";
	int version();
}

5. 속성 이름이 value일 경우 특별 규칙
@MyAnnotation(value = "xxx") -> 원래
@MyAnnotation("xxx") -> 속성 이름이 value인 경우

6. 어노테이션 자체에는 예외를 던질 수 없음
- 어노테이션 속성은 단순 선언만 가능하고 예외, 로직, 조건문 등은 포함할 수 없음
String value() throws Exception; -> X

7. 속성은 매개변수를 가질 수 없음
String name(String input); -> X


-------------------------------------------------------------------------------------
리플렉션(Reflection): 클래스, 메서드, 필드, 생성자 등의 정보를 프로그램 실행 중에 동적으로 조사하거나 조작할 수 있는 기능

리플렉션 API의 핵심 클래스
Class<?>		클래스의 메다 정보를 저장할 수 있는 클래스
Field		클래스의 필드를 표현
Method		클래스의 메서드를 표현
Constructor	생성자를 표현
Annotation	어노테이션 정보를 표현

jdbc(java database connectivity)를 사용해서 연결을 함
oracle < - > DBeaver
드라이버 -> 두개를 연결해주는 다리 같은 역할

라이브러리: 다양한 기능을 쉽게 사용할 수 있도록 미리 만들어진 클래스와 메서드의 집합

1. 표준 라이브러리
- jdk에 기본적으로 포함되어 있음
- java.*, javax.*, javafx.*

2. 외부 라이브러리
- 개발자 별도로 다운로드해서 사용하는 라이브러리
 
Statement 보안 위험
Statement stmt = conn.createStatement();
String sql = "select문";
ResultSet rs = stmt.executeQuery(sql);

' OR '1' = '1 같은 값이 들어가게되면 전체 테이블이 출력되는 SQL Injection 발생 위험이 있음

객체지향 프로그램래밍의 설계원칙(SOLID)
1. SRP(Single Resopeonsiblility Principle)
   단일 책임의 원칙 - 클래스는 하나의 책임을 가져야 함
   한 클래스가 데이터 저장 및 로직 처리 등 여러 역할을 동시에 담당하면 변경 시 문제가 발생 할 확률이 높음
   하나의 역할만 수행하도록 분리

2. OCP(Open-Closed-Principle)
   개방-폐쇄의 원칙
   소프트웨어 구성 요소는 확장에는 열려있어야하지만 수정에는 닫혀있어야 함
   새로운 기능이 추가되어도 기존 코드를 변경하지 않고 새로운 클래스를 추가하거나 상속 및 인터페이스로 확장

3. LSV(Liskov Substitution Principle)
   리스코프 치환의 원칙
   서브타입(자식타입)은 언제나 기반타입(부모타입)으로 대체할 수 있음 -> 타입변환
   부모 클래스 타입의 변수에 자식 클래스의 객체를 사용해도 프로그램이 올바르게 동작해야 하며, 자식 클래스가
   부모클래스의 가이드를 위배하지 않아야 함

4. ISP(Interface Segregation Principle)
   인터페이스 분리 원칙
   하나의 일반적인 인터페이스보다 여러개의 구체적인 인터페이스를 사용해야함
   인터페이스를 작고 구체적인 역할로 분리하여 구현
   
5. DIP(Dependency Inversion Priciple)
   의존 역전 원칙
   고수준 모듈은 저수준 모듈에 의존하면 안되며, 둘 다 추상화에 의존해야 함
   구체적인 구현보다는 추상화(추상 클래스 or 인터페이스) 를 이용해 모듈(클래스)간 결합도를 낮추면
   한 모듈이 다른 모듈에 미치는 영향을 줄일 수 있음

객체 지향 프로그래밍의 4대 원칙
1. 추상화
   인터페이스와 추상클래스 등을 통해 시스템의 공통된 행동을 정의
   변경에 따른 영향을 최소화하고 유지보수에 용이

2. 상속
   공통된 로직은 상위클래스에 정의하고 하위 클래스에서는 재사용하면서 특화된 기능을 추가해 중복을 줄일 수 있음

3. 캡슐화
   객체 내부의 데이터를 보호하고, 외부에서는 메서드로만 접근하도록 함

4. 다형성
   동일한 인터페이스나 상위 클래스를 이용하여 다른 객체를 사용할 수 있게 하는 능력
   코드 유연성과 확장성을 높여 실행 시점에 객체의 실제 타입에 따라 적절한 로직이 실행되도락 함

Ex) Parent p = new Child();
p.display //Parent에만 있는 메서드
p.info //오버라이드된 메서드
p.childOnly //Child에만 있는 메서드 // 오류
((Child)p).childOnly // 자식 클래스에만 있는 메서드를 사용하고 싶을때 강제로 타입 변환 후 사용

컴파일시 자바 컴파일러는 변수의 선언 타입을 기준으로 메서드나 필드 등 어떤 멤버에 접근할 수 있는지결정

동적바인딩
메서드 호출 시점에 실행되는 메서드의 구현을 결정
호출된 메서드가 실제 객체 타입에 따라 실행됨
단 호출할 수 있는 메서드는 미리 컴파일러가 Parent클래스에 있는 메서드로 제한한 후
런타임에 오버라이딩 된 메서드를 실행하는 것임

다형성을 사용하면 코드가 간결해지고 서로 다른 객체들이 
같은 인터페이스(또는 부모클래스의 메서드)를 통해 처리되기 때문에 확장성과 유지보수성이 높아짐

추상클래스의 목적
공통 필드, 메서드를 공유
서버 클래스에서 구체적으로 구현하도록 강제할 때 사용

추상 메서드 -> 중괄호 영역이 없음, 자식클래스 한테 메서드를 쓰라고 강제함,  공통 필드, 메서드를 공유
상속 -> 추상화
서브 클래스에서 구체적으로 구현하도록 강제할 때 사용
단일 상속만 가능(두개 이상의 부모를 갖는 게 불가능)

추상 클래스에 일반 메서드 생성도 가능

추상클래스는 무조건 오버라이딩 해야함
추상클래스는 공통 상태나 기본기능까지 포함하여 상속을 통한 코드 재사용을 강조함
ㄴ> 관련 있는 클래스들끼리 사용

인터페이스는 서로 다른 클래스들이 공통된 행동만 하도록 약속함
ㄴ> 메서드명을 정해놓고 사용
find() -> 조회
add() -> 추가
modify() -> 수정
delete() -> 삭제

인터페이스끼리는 다중 상속이 가능하고 다중 구현도 가능

내부 클래스의 종류
1. 인스턴스 클래스
2. 정적 클래스
3. 지역 클래스

내부 클래스의 객체 -> Ex) 엔진 1개 만들어짐
-> Engine 객체는 상태가 있는 구성 요소로 존재

내부 클래스로 정의하면 -> 외부클래스의 내부구성요소를 객체단위로 표현하고 싶을때
ㄴ>Ex) 자동차의 부품인 엔진, 브레이크 등...
해당 클래스가 외부 클래스없이는 절대 존재할 수 없을 때
ㄴ>엔진은 Car없이는 의미가 없음

상태와 기능을 하나의 단위로 묶고 싶을 때 
클래스를 통해 만들면 상태와 기능을 둘 다 가질 수 있음

여러 메서드에서 공통적으로 사용하는 도우미 객체일 때
반복되는 로직, 상태 변경을 하나의 객체로 묶어 표현이 가능



논리적으로 소속은 있지만 외부 객체 없이 사용하는 독립적 클래스
외부 클래스의 객체없이도 사용할 수 있어서 효율적임

외부 클래스의 정적 맥락과 관련된 클래스를 내부에 묶고 싶을 때

외부에 불필요하게 노출할 필요 없이 외부 클래스에만 관련된 유틸 클래스 등을 숨길수 있음

지역 내부 클래스
메서드 안에 정의된 클래스
메서드가 끝나면 같이 종료되서 사용할 수 없음

메서드 안에서 정의된 지역 내부 클래스
클래스 외부로 뺄 필요 없이 한정된 범위 내에서만
재사용성이 없고 메서드 안에서만 사용하는 클래스라면
외부에서 클래스를 선언하지 않아도 돼서 코드가 간결해줌

단순 변수, 함수로는 부족할 때
일회성 객체에 상태 / 기능을 동시에 담고 싶을 때

익명 클래스
이름이 없는 클래스
선언과 동시에 객체를 생성하며 주로 인터페이스나 추상 클래스를 구현하거나 상속할 때 사용
new 생성자(){익명 클래스};

오류
OutOfMemoryError: 힙 메모리가 부족할 때
StackOverflowError: 재귀 호출이 너무 깊을 때

이런 문제는 애초에 발생하지 않게 코드를 설계해야함

예외(Exception)
프로그램에서 발생할 수 있는 문제 상황을 처리하기 위한 클래스
개발자가 직접 예외처리를 해줘야 함

Checked Exception(체크 예외): 컴파일이 확인 됨
반드시 try-catch로 처리하거나 throws로 떠넘겨야 함
예외처리를 강제함(컴파일 에러 발생 가능)
IOException
SQLException
FileNotFoundException

UnChecked Exception(런타임 예외)
RuntimeException을 상속한 예외들
컴파일러가 예외 처리를 강제하지 않음
개발자가 실수로 만든 예외가 대부분

NullPointerException
ArrayIndexOutBoundsException
NumberFormatException

Exception클래스
모든 예외들의 부모클래스

e.printStackTrace();
예외가 발생했을 때 예외의 정보를 자세하게 출력하는 메서드

finally
예외 발생 유무와 상관없이 실행되는 구문
필요 없으면 안써도 됨
보통 외부 연동이나 예외가 발생해도 정상 종료되어야 할 구문들에서 사용

예외 던지기
메서드 안에서 예외가 발생했을 때 바로 처리하는 것이 아니라 함수를 호출할 쪽에서  처리하는 것
메서드명() throws 예외의 종류

main에 예외 던지기를 하면 JVM이 처리를 함 예외 메시지와 함꼐 printStackTrace()를 콘솔에 출력하고 프로그램을 비정상 종료시킴

static 정적변수, 메서드는 실행하면 가장 먼저 메모리에 올라감

객체끼리의 ==은 주소값을 비교하는 것
문자열의 값은 수정이 되는 게 아닌 연결을 버리고 새로운 값을 갖는 메모리를 할당 받음

StringBuilder
가변속성을 지닌 클래스
내부에 여유공간을 두기 때문에 문자열을 합칠때 메모리에 새롭게 생성하는 과정을 현저히 생략할 수 있음
append, delete insert, reverse

Math클래스
수학에서 자주 사용하는 상수들과 함수들을 미리 구현해놓은 클래스로 자바에서 수학 계산이 필요할 때 사용
모든 메서드는 정적 메서드

올림 버림 반올림을 할때 무조건 소수점 첫째자리에서 함
둘째 자리로 올림 버림 반올림을 할때 Math.ceil(3.141592*100)/100 ==> 올림 했을 때 결과 3.15

제네릭
클래스에 들어가는 필드, 메서드의 타입을 미리 정하지 않음
객체를 만들때 설정
제네릭은 객체가 만들어질 때 타입이 결정됨
타입 매개변수에는 클래스만 들어갈 수 있음

장점: 타입별로 필드나 메서드를 따로 만들지 않아도 됨

제네릭 메서드
메서드의 선언부에 타이 매개변수를 따로 추가를 하는 것
이 경우 메서드 내부에서 사용되는 타입이 메서드 호출 시 결정

1. 타입 추론
제네릭 메서드를 호출할 때 인자들의 타입을 참고하여 컴파일러가 알맞은 타입 매개변수를 자동으로 결정
개발자는 타입을 별도로 명시할 필요가 없어 코드가 더 간결해짐

2. 명시적 타입 지정
가끔 컴파일러의 추론이 원하는 타입과 다르게 작동할 수 있기에 호출 시점에 타입을 명확히 지정하여
코드 가독성을 높이고자 할 때 사용함
타입을 명시적으로 지정하면 오류를 방지하고 의도를 명확히 할 수 있음


일반적인 제네릭 타입에서 하위 타입을 쓸 수 있음
Wrapper클래스(Integer, Double, Float -> Number클래스의 자식)

불공변성
타입간 상속관계가 있어도 제네릭으로 감싸진 타입은 서로 별개의 타입으로 취급됨
이를 통해 예상치 못한 타입 혼란과 런타입 오류를 미연에 방지할 수 있음
제네릭에 감싸져 있으면 부모클래스 타입에서 자식 클래스 타입의 데이터를 불러오는게 불가능
ex) ArrayList<Number>  parent = new ArrayList<>();
ArrayList<Integer>  child = new ArrayList<>();
parent = child // 불가능

제네릭 와일드카드
<?> : 어떤 타입이든 될 수 있다는 의미
그냥 ?만 사용하게 되면 <Object>쓰는 것과 다름이 없어지므로 보통 제네릭 타입 한정 연산자와 같이 쓰임

<? extends 상위타입> : 상위타입의 하위 개념은 다 들어올 수 있음, 읽기 작업에 적합
ex) <? extends Number> -> Number, Integer, Double, Float이 들어갈 수 있음
ex) List<?extends Number> numList = new ArrayList<>();
numList.add(100) // ?에 정확한 타입이 뭐가 들어올지 모르기 때문에 추가할 수 없음 // null은 타입과 상관없기 때문에 가능

<? super 하위타입> : 하위타입의 상위 개념은 다 들어올 수 있음, 쓰기 작업에 적합(최소 Integer를 보장)
ex)<? super Integer> -> Integer, Number, Object -> Integer타입은 안전하게 추가가 가능함
<? extends Number>와 반대로 읽어올때 문제가 발생
ex) List<? super Integer> iList = new ArrayList<>();
     iList.add(10) //최소 Integer는 보장하기 때문에 안전하게 값을 추가할 수 있음
읽기 작업: 읽어온 값이 구체적인 타입을 보장받지 못하기 때문에 잘 사용하지 않음
ex) Object value = iList.get(0) //실행됨
     Integer value2 = iList.get(0) // 오류 //구체적인 타입으로 사용하려면 형변환이 필요 => Integer value2 = (Integer)iList.get(0);

제네릭을 사용할 때 주의 사항
1. 제네릭 타입의 객체는 생성이 불가능
ex) T t = new T() // 불가능
2. static변수의 데이터 타입으로 제네릭 타입 파라미터가 올 수 없음, 반환타입, 매개변수로 사용 불가능
- static이 가장먼저 메모리로 올라감 -> 제네릭 객체가 생성되기도 전에 이미 자료 타입이 정해져 있어야함
3. 제네릭으로 배열 선언 주의점
제네릭 클래스 자체를 배열로 만들 수 없음

Iterator가 리스트 원본의 주소를 참조함
next()메서드를 호출하면 참조한 주소로 가서 요소를 직접 읽어옴

한번 사용한 Iterator객체는 재사용할 수 없음
순회를 하고 나면 hasNext()가 가리키는게 리스트의 끝이기 때문에 false를 반환하므로 재사용이 불가능
재사용하려면 다시 생성후 사용해야함

set은 index가 없기 때문에 하나씩 꺼내는 것이 불가능함 => Iterator를 이용하면 꺼낼 수 있음


getOrDefault(Object key, V defaultValue);
key를 통해서 조회된 value가 있으면 value를 반환 조회된 value가 없으면 default값 반환

keySet()

values() : Map에 들어있는 모든 value를 Collection 형태로 반환

entrySet() : 모든 key-value 쌍을 Map.Entry객체로 구성된 Set형태로 구성

컬렉션에서 가장 많이 쓰는 순서
1. ArrayList
2. HashMap
3. HashSet

@FunctionalInterface: 컴파일러한테 현재 인터페이스가 함수형 인터페이스임을 알려주는 어노테이션
인터페이스를 함수형 인터페이스라고 선언한 순간 무조건 1개의 추상 메서드만 들어갈 수 있음

람다식 : 함수를 식처럼 사용

람다식을 쓰는 이유
- 코드가 간결해짐 

기존 방식 : 인터페이스 -> 클래스로 구현 -> 메인에서 메서드 사용

익명 클래스 : 인터페이스 -> 메인에서 익명 클래스 구현 -> 메서드 사용 (좀 더 간결해짐(클래스 파일을 하나 더 안만들어 됨))

람다식으로 구현
람다식은 함수의 선언부에서 매개변수 부분과 코드 블럭 부분만 살림
매개변수와 코드블럭 사이에 '->'를 쓰면 끝남
(매개변수들) -> {실행할 코드;};

람다식은 함수형 인터페이스를 구현한 객체라고 볼 수있음
표면상으로는 new키워드를 사용하지 않지만 일반적인 자바 객체들처럼 Heap영역에 할당이 됨

자바는 객체지향 언어로서 모든 메서드는 객체를 통해 이루어짐
람다식은 익명함수 처럼 보이지만 실제로는 함수형 인터페이스를 구현한 객체이기 때문에 
다른 메서드처럼 추상메서드의 이름으로 호출하는 것이 자연스러움

자바에서 제공하는 함수형 인터페이스
Function<T, R>
추상 메서드 R apply (T t)

Predicate<T>
추상 메서드 boolean test(T t)

Consumer<T>
추상 메서드 void accept(T t)

Supplier<T>
추상메서드 T get()

BinaryOperator<T>
추상메서드 T apply(T t1, T t2)

BiFunction<T,U,R>
추상메서드 R apply(T t, U u)

BiPredicate<T,U>
추상메서드 boolean test(T t, U u)

BiConsumer<T, U>
추상메서드 void accept(T t, U u)

람다식의 연결
andThen

ex) Function<Integer, Integer> addfive = x -> x + 5;
    Function<Integer, Integer> multiplyByTwo = x -> x * 2;
    Function<Integer, Integer>addThenMultiply = addFive.andThen(MultiplyByTwo);//addFive부터 실행

    System.out.println(addThenMultiply.apply(5)); // x에 5를 대입

compose
ex)Function<Integer, Integer>addThenMultiply = addFive.compose(MultiplyByTwo);//MultiplyByTwo부터 실행

predicate에서는 and 또는 or를 사용

ex) Predicate<Integer> 

negate()
not으로 바꿔줌


참조 연산자 ::
람다식 내부에서 메서드를 호출 할 때 보다 간결하게 표현하기 위해서 사용하는 연산자

1. 정적 메서드 참조
Function<String,Integer> parseInt = x -> Integer.parseInt(x);
ㄴ> Function<String,Integer> parseInt =  Integer::parseInt;

2. 인스턴스 메서드 참조
Comsumer<String> printer= System.out::println;

3. 생성자 참조
Supplier<List<String>> listSupplier = ArrayList<String>::new;

4. 클래스의 특정 메서드 참조
Function<String,Integer> length = String::length;


Stream
컬렉션(데이터들이 들어가있음) 
데이터들을 하나씩 처리하는 방식 -> 데이터를 저장한다기보다는 처리하는 기능에 집중이 되어있음

스트림의 특징
1. 선언형 : 반복문없이 데이터처리가 가능함
	ex) names.stream().forEach(System.out::println);

2. 내부반복 : 개발자가 직접 반복문을 작성하지 않음(스트림 api가 반복을 대신 처리해줌)

	외부반복(직접 for문씀)
	for(String name : names){
		sysout(name);
	}

	내부 반복(stream이 알아서 반복함
	ex) names.stream().forEach(System.out::println);

3. 불변성: 원본 데이터는 변경되지 않음
	names.stream().filter(s -> s.length() <= 3) //문자열의 길이가 3보다 작거나 같은것만 출력
		.forEach(System.out::println);

4. 지연연산 : 최종 연산이 실행되기 전까지 중간 연산이 수행되지 않음

5. 최종연산까지 사용하고나면 스트림을 재사용할 수 없음 (다시 생성해야함
	
스트림 사용 방법
1.스트림을 생성함
- 배열로부터 생성하는 것도 가능
	String[] fruits = {"Apple", "Banana", "Charry"};
	Stream<String> fruitStream = Arrays.stream(fruits);
	fruitStream.forEach(System.out::println);

	
- 컬렉션객체로부터 생성하는 것도 가능
	Stream<String> nameStream = names.stream();
	nameStream.forEach(System.out::println);

- Stream.of()
	Stream<String> stream = Stream.of("A","B","C")
	stream.forEach(System.out::println);


중간연산
중간연산은 스트림을 변환하거나 필터링 하는 연산 새로운 스트림을 반환하며 지연처리가 됨
중간연산은 연결해서 여러개 사용할 수 있음

filter(Predicate)
조건에 맞는 요소만 필터링
List<String> list = Arrays.asList("apple","banana","charry", "avocado");
list.stream()
	.filter(s -> s.startWith("a")) //filter안에 true, false로 반환되는 값이 들어가야함
	.forEach(System.out::println);

map(Function)
요소를 변환
list.stream()
	.map(String::toUpperCase) //대문자로 변경
	.forEach(System.out::println);

distinct()
List<Integer> list2 = Arrays.asList(1,1,1,1,1,1,3,2,2,3,5,5,6);
list2.stream()
	.distinct() //중복을 제거
	.forEach(System.out::println);// 결과 1, 3, 2, 5, 6


sorted()
오름차순 정렬
Stream.of("banana", "apple","charry")
	.sorted()
	.forEach(System.out::println); // 결과 : apple banana charry

sorted(Comparator)
Stream.of("banana", "apple","charry")
	.sorted(Comparator.comparing(t -> t))
	.forEach(System.out::println);

comparing(t -> t): 항등함수
항등함수 : 입력값을 그대로 반환하는 함수

reversed()
Stream.of("banana", "apple","charry")
	.sorted(Comparator.<String, String>comparing(t -> t).reversed())// reversed()사용시 타입을 꼭 명시해줘야함
	.forEach(System.out::println);

limit() / skip()
처음부터 x개를 제한
처음부터 x개를 건너 뜀
Stream.of(1,2,3,4,5)
	.limit(3)
	.forEach(System.out::println); // 결과 : 1, 2, 3

Stream.of(1,2,3,4,5)
	.skip(2)
	.forEach(System.out::println); // 결과 : 3, 4, 5

peak()
값을 그대로 유지하면서 중간에 볼 수 있음
Stream.of("one", "two", "three")
	.peek(t -> System.out.println("peek : " + t))
	.map(String :: toUpperCase)
	.forEach(System.out::println);
결과 : peak : one
        ONE ...

