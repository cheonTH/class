[환경변수]
프로그램이 컴퓨터에서 동작하는 방식에 영향을 미치는 동적인 값들의 모임

jdk를 윈도우가 인식 못할 때
환경변수를 설정해주면 됨

java8 , 11, 17, 21

이미 만들어진 프로젝트의 경우는 8버전일 수 있음
새로 시작하는 경우는 11, 17을 사용할 수도 있음

LTS(Long Term Service)
- 장기간 안정적인 지원을 받을 수 있는 버전
- 실무에선느 LTS버전을  선호하는 경향이 있음
- 보안 패치와 성능개선을 지속적으로 받을 수 있다는 장점이 있기 때문

자바는 클래스라는 파일에 코드를 작성
관련된 기능이 있는 파일들끼리 묶어서 보관 -> 패키지

while
-몇번 반복해야 할지 모를때 사용하면 유용
-Ex) 숫자 맞추기 퀴즈(몇번만에 맞출 수 있나)
-조건을 검증하고 반복을 실행

do-while
반복을 1회 실행을 하고 조건을 검증

필드
ㄴ> 일반 필드 -> 객체마다의 상태(이름, 나이 ,직업, 키 등... 서로다른 객체)
ㄴ> 정적 필드 -> 객체 공통의 상태(눈, 코, 입, 귀, 손가락 등...)

메서드
ㄴ> 메서드는 메서드 안에서 정의할 수 없음
ㄴ> 메서드는 메서드 안에서만 호출할 수 있음

public: 같은 프로젝트 내에서 접근가능
private: 현재 클래스에서만 접근 가능
protected: 상속관계에서만 접근 가능
default: 현재 패키지에서만 접근 가능

반환형
반환값의 타입을 결정하는 키워드
반환형으로 올수있는 타입은 int, boolean, char 등 과 같은 기본자료형도 되고 개발자가 만든 클래스도 가능

상속
부모클래스 - 상위 개념, 일반적인 개념
자식클래스 - 하위개념, 구체적인 개념

extends키워드를 사용해야 자식관계가 성립이 됨
자식클래스 extends 부모클래스{

}

상속관계가 성립이 되면 객체가 만들어졌을때 부모의 필드나 메서드를 사용할 수 있음
ㄴ>자식의 생성자가 호출 될 때 부모의 생성자가 먼저 호출되기 때문

this -> 객체 자기 자신을 참조하는 변수
super -> 부모를 참조하는 변수

Child(){
   super(); -> 부모생성자의 호출
}

부모의 생성자가 매개변수를 가진다면
Parent(String name, int age){
   this.name = name;
   this.age = age
}

Child(String name, int age){
   super(name, age) -> 부모생성자의 호출(생력이 불가능)
}

오버라이드(Override)
부모에 정의된 메서드를 자식클래스가 재정의하는 것
오버라이드 규칙
1. 부모클래스의 메서드명, 반환타입, 매개변수가 동일해야함
2. 부모클래스의 메서드보다 접근 제한범위를 줄일 수 있음

인터페이스
상수 -> 한번 대입되면 바뀌지 않는 값
추상 메서드 -> 구현체({})가 없는 메서드
default메서드 -> default 접근 제한자를 가진 완전한 메서드

익명클래스
이름이 없는 클래스
일회성으로 사용되는 클래스를 간단하게 정의할 수 있음
인터페이스나 추상클래스의 구현을 간단하게 처리할 수 있음

함수형 인터페이스(@FunctionalInterface)
익명클래스보다 람다식이 더 간단하기 때문에 함수형 인터페이스를 사용할 때는 람다식을 더 권장함

직접 인터페이스를 만들 일은 적고, 자바에서 제공하는 인터페이스를 사용할 일 이 더 많음

Collection -> 자바에서 제공하는 인터페이스
↓
List, 		Set 		Map		-->인터페이스
↓		↓		↓
ArrayList		HashSet		HashMap		-->인터페이스의 구현 클래스
LinkedList	TreeSet
Vector

ArrayList -> 인덱스를 가지고 있음, 배열을 기반으로 동작, 배열과 다른점은 데이터를 넣은데로 들어감
ㄴ> 조회에는 유리함(index에 바로 접근함), 추가 / 삭제에는 불리함(상대적으로)

LinkedList -> 노드를 기반으로 동작
노드 : 데이터와 다음 노드의 주소를 가지고 있는 객체
인덱스가 없음, 조회는 불리, 추가 / 삭제에 유리

HashSet -> 인덱스가 없음, 정렬이 되지 않음, 중복이 없음

HashMap -> Key와 Value가 쌍으로 이루어져있음, 인덱스가 없음, 대량의 데이터를 저장할 때 좋음
컬렉션은 중첩해서 사용할 수 있음
ex) HashMap<String, List<String>> map


list, set
add() -> 데이터의 추가
set() -> 데이터의 수정
remove() -> 데이터의 삭제
clear() -> 컬렉션 내부의 데이터 전체 삭제
isEmpty() -> 비어있는지 판별
get() -> value값 가져오기

HashMap
put()
get()
getOfDefault()
putIfAbsent()
remove()
isEmpty()

람다식(lamda Expression)
함수를 값처럼 사용해서 변수에 대입할 수 있음
람다식을 작성하기 위해서는 함수형 인터페이스가 반드시 필요

Ex) public int add(int x, int y){
	return x + y;
     }	=> 원래 쓰던 함수

람다식
(int x, int y) -> {return x + y}
ㄴ>(x , y) -> {return x + y} //자료형을 생략할 수 있음
ㄴ>(x, y) -> x + y //return과 중괄호는 같이 생략할 수 있음
ㄴ>x -> System.out.println(x) //매개변수가 하나일 때는 소괄호도 생략이 가능함
System.out::println

우리가 직접 함수형 인터페이스를 생성할 수 있지만 컬렉션이 속해있는 메서드에 매개변수로 사용되는 일이 더 많음

람다식의 참조 연산자(::)
람다식을 더 간결하게 표현하기 위한 문법

s -> System.out.println  ==> System.out::println

종류와 형식
정적 메소드 참조 	
클래스명::정적메서드명  		Integer::parseint

인스턴스 메서드 참조	
참조변수::인스턴스메서드		System.out::println

특정 타입의 인스턴스 메서드
클래스명::인스턴스 메서드 		String::toUpperCase

생성자 참조
클래스명::new			ArrayList::new

스트림의 특징
데이터를 하나씩 순회에서 반복할거라면 iterator를 쓰면 되는데 왜 스트림을 써야하는 이유?
-> 데이터 처리 파이프라인을 구성해서 선언형으로 데이터를 처리할 수 있음

일반 반복
for(String name : names){
	if(name.length() > 3){
		System.out.println(name);
	}
}

선언형
name.stream().메서드().메서드().메서드()
ex) name.stream().filter().map().forEach()

내부반복
개발자가 반복을 제어하지 않고 스트림이 알아서 요소들을 반복하면서 처리하는 방법
어떻게 반복할지는 스트림이 정하고 반복하면서 무엇을 할지 정하면 됨

지연연산(Lazy Evaluation)
-중간 연산은 최종연산이 실행되기 전까지 아무일도 하지 않음
-최종연산이 호출될 때까지 연기되는 처리 방식 

불변성(Immutable)
-원본데이터는 변경하지 않음

일회성
-스트림은 최종연산이 끝나면 다시 중간연산을 할 수 없음

최종연산
스트림 파이프라인의 마지막에 실행되는 연산
스트림이 소비(consumed)되고 실제 데이터가 처리됨

중간 연산들을 실행하게 해주는 트리거이자, 스트림의 결과를 만드는 연산

특징
- 스트림을 종료시키며, 다시 사용할 수 없음
- 값을 반환함

ArrayList<T> : index가 있음 배열기반, 조회에 유리
HashSet<T> : index가 없음 순서가 없음 중복이 없음
HashMap<T> : key-value의 쌍으로 이루어져 있음

스레드
main이 실행될 때 동시에 실행하려고 하는 것

Thread상속
단일 상속만 가능
간단한 구현
Thread클래스를 직접 다룰수 있음

Runnable구현
다른 클래스 상속과 병행 가능
더 유연한 구조 가능
Runnable은 실행 코드만 담고 Thread는 별도로 생성

start()메서드 스레드를 시작(내부적으로 run() 호출)

스레드의 이름 , 상태 순위

main도 스레드
스레드 -> 작업의 흐름
하나의 프로그램 안에서 여러 작업을 동시에 실행할 수 있게 해주는 기술
하나의 프로그램에는 최소 1개의 스레드가 있음

우리가 인위적으로 스레드를 생성하는 것이 가능
1. Thread클래스를 상속받아서 생성
2. Runnable인터페이스를  구현

메인 작업과 별개로 동시에 작업을 하고 싶은 내용을 run()메서드 안에 작성

Runnable방식이 더 유연하고 실무에서도 많이 사용

스레드를 여러개 만들고 사용할 때 스레드가 공유하는 변수나 메서드에 접근하면 데이터 충돌 발생 가능성이 있음
하나의 스레드가 점유할 때는 다른 스레드가 사용할 수 없는 동기화(Synchronized)를 해야함

프로세스 안에 스레드가 1개면 -> 싱글 스레드
프로세스 안에 스레드가 여러개 -> 멀티 스레드

