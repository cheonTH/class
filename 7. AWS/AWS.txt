IAM(Identity and Access Management)
AWS에서 보안과 권한을 관리하는 서비스
AWS에서 누가 무엇을 할 수 있는지 결정하는 도구

AWSElasticBeanstalkMulticontainerDocker
여러개의 Docker 컨테이너를 한꺼번에 실행할 수 있게 해주는 설정

Docker -> 인프라 공부할 때 많이 사용
어플리케이션을 통째로 포장해 어디서든 똑같이 실행할 수 있게 해주는 기술

웹사이트 소스코드
MySQL DB
를 하나로 묶어 '도커 이미지'파일로 만듬
다른 컴퓨터에서 도커 이미지를 넣어서 실행만 하면 끝남

AWSElasticBeanstalkWebTier
사용자가 직접 접속하는 웹 어플리케이션을 위한 역할
EC2 -> AWS에서 제공해주는 가상의 컴퓨터

AWSElasticBeanstalkWorkerTier
사용자가 직접 요청하는 것이 아닌, 백그라운드에서 자동으로 일하는 서버를 위한 역할

elasticbeanstalk
웹 어플리케이션을 자동으로 배포하고 운영해주는 서비스
코드만 업로드 하면 자동으로 다음과 같은 작업을 해줌
1. Ec2 생성(가상 서버)
2. 로드 밸런서 설정(트래픽 분산)
3. 오트 스케일링 설정(트래픽이 늘어나면 서버를 늘리고, 줄면 줄임)
4. 어플리케이션 싱행
5. 도메인 연결, 보안 그룹 설정 등

서버 세팅, 배포, 확장, 모니터링 등을 자동화하여 개발자가 어플리케이션 로직에만 집중할 수 있도록
도와주는 서비스

spring:
    jpa:
        show-sql: true
- jpa에서 실행되는 sql쿼리를 콘솔에 출력

spring:
    jpa:
        database-platform: org.hibernate.dialect.MYSQL8Dialect
- Hibdenate에서 사용할 데이터베이스를 MySQL 8.x버전에 맞게 지정함

spring:
    jpa:
        hibernate:
            ddl-auto: update
- 어플리케이션이 시작될 때 데이터 베이스 스키마를 자동으로 업데이트하는 설정


1. 백엔드 빈스톡
ㄴ> 스프링부트 빌드해서 배포
ㄴ> RDS 연결(클라우드 데이터베이스)
ㄴ> CORS처리도 해줘야함

2. 프론트엔드 빈스톡
ㄴ> 리액트 빌드해서 배포
ㄴ> 빌드를 한 폴더와 같이 업로드해야할 파일들이 있음
ㄴ> pacage.json -> express 설치, 서버 시작 명령 지정
ㄴ> index.js -> express의 실행 로직에 대한 작성
ㄴ> Procfile -> EB가 서버를 어떻게 실행할지 명령을 지정

도메인 설정
1. 도메인 구매
1-1. Route53에서 구매
1-2. 가비아에서 구매

네임서버
도메인에 대한 DNS레코드들을 보관하고 있는 서버

DNS레코드 : 도메인 이름과 관련된 정보를 저장하는 항목

A	-> 도메인을 IPv4주소와 연결을 함
AAAA	-> 도메인을 IPv6주소와 연결을 함
CNAME 	-> 도메인을 다른 도메인으로 연결함
www.naver.com
naver.com  ->  www.naver.com
naver	   ->  www.naver.com

NS	-> 네임 서버 지정
SOA	-> 이 도메인의 최초 출처가 누구인지 정보가 담겨있음


2. AWS에 호스팅 영역을 생성
ㄴ> 호스팅 영역을 만들면 두개의 레코드가 생성이 되어있음
NS, SOA
이 두개는 DNS 작동의 핵심 기초가 되는 레코드들이고 Route53이 해당 도메인의 권한을 갖고 DNS 서비스를
운영하겠다는 선언

NS레코드(Name Server Record)
- 이 도메인의 DNS 요청을 처리할 네임서버 주소들을 지정
- 이 NS 레코드는 도메인 등록기관(Gabia 등)에도 등록해야 함
- 그래야 이 도메인의 DNS는 Route53이 책임진다고 인식함

SOA(Start Of Authority)
- DNS존의 시작지점임을 선언
- 사용자가 수정할 수 없음

서비스에 도메인 등록하기
1. EC2의 퍼블릭 IPv4주소를 복사
2. AWS의 Route53의 호스팅 영역의 레코드 생성 클릭
3. 레코드 이름을 정함
4. 레코드 유형 A레코드로 함
ㄴ> 백엔드 a레코드
ㄴ> 프론트엔드 a레코드
CORS처리까지 해주면 도메인으로 접속할 수 있음
