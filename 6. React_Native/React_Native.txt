0리액트 네이티브
리액트 기반의 모바일 어플리케이션 개발 프레임워크
JSX, 컴포넌트 기반
한 번만 작성하면 안드로이드, IOS 둘다 확인 가능

프로젝트를 만들 때는 expo를 활용

npm install -g expo-cli -> expo설치

expo init 프로젝트명 -> 프로젝트 생성

npx expo start  ||   npm start  -> 프로젝트 실행

CLI(Commend-Line-Interface): 사용자가 컴퓨터에게 명령을 입력하여 상호작용하는 방식


JSX문법
여러개의 태그는 반드시 하나로 묶어야 함
React-Native는 <div>역할을 하는 <View>라는 컴포넌트가 있음
Fragment를 써도 됨
if문 가능, 3항 연산자 가능
&& : 앞의 조건이 참이면 뒤의 조건을 렌더링 함
|| : 앞의 조건이 거짓이면 뒤의 조건을 렌더링 함

null과 undefined
- 조건에 따라 출력하는 값을 변경하다보면 컴포넌트가 null이나 undefined를 반환하는 경우가 있음

JSX의 경우 null은 허용하지만 undefined는 오류가 발생함

스타일링
인라인 스타일링
- JSX에서는 HTML과는 달리 style에 문자열로 입력하는 것이 아닌 객체 형태로 입력해야함
- 속성은 카멜표현식으로 작성해야함


컴포넌트
- 재사용이 가능한 조립블록
- ui의 조각
- 컴포넌트는 단순히 UI의 역할만 하는 것이 아니라 부모로부터 받은 속성(props)나 자신의 상태(state)에 따라
  달라지고 다양한 기능을 수행함
- 리액트 네이티브는 데이터와 UI 요소의 집합체라고 할 수 있는 컴포넌트를 이용하여 화면을 구성함

특징
독립적임
- 컴포넌트는 다른 코드와 독립적으로 동작함
- 한 곳에서 수정해도 다른 부분에 영향을 주지 않음
- 한 번 작성한 컴포넌트를 여러곳에서 사용할 수 있음
- 예를 들어, 앱에서 같은 스타일의 버튼이 필요하다면 버튼 컴포넌트를 만들어 원하는 곳에서 재사용할 수 있음

유지보수가 용이함
- 화면의 각 부분을 작은 컴포넌트로 분리하여 만들기 때문에 필요한 부분만 수정할 수 있음

가독성 증가
- 코드가 잘게 나누어지기 때문에 이해하기 쉽고 코드관리가 수월함


내장 컴포넌트
- 리액트 네이티브에서는 다양한 내장 컴포넌트들이 제공됨

View와 Text
View
- 가장 기본적인 레이아웃 컴포넌트, HTML의 <div>와 유사한 역할을 함
- 화면에 여러 요소를 그룹화하거나 레이아웃을 구성할 때 사용됨

Text
- 텍스트를 표시할 때 사용하는 컴포넌트
- <p>, <span>과 비슷하며 React-Native에서 텍스트를 표시할 때 필수적으로 사용됨

Button
- React-Native에서 사용하는 버튼을 만들어주는 컴포넌트 
- 설정할 수 있는 속성들이 있음
-- title: 버튼에 쓰이는 문구
-- onPress : 클릭 이벤트
-- color속성 : IOS에서는 텍스트의 색 안드로이드에서는 버튼의 배경색을 나타내는 값
-- ScrollView : 스크롤이 가능한 뷰를 만들 때 사용하는 컴포넌트

커스텀 컴포넌트 만들기
- React-Native에서 다양한 컴포넌트를 제공하고 있지만 프로젝트를 진행하다보면 여러 컴포넌트를 조합해서
  새로운 컴포넌트를 제작하여 사용하게 됨
- React-Native에서 제공하는 컴포넌트들을 이용해서 커스텀 컴포넌트를 만들 수 있음

- Pressable과 Text 컴포넌트를 이용해서 MyButton컴포넌트를 만들 수 있음

Pressable컴포넌트
- 터치 이벤트에 대한 더 세부적인 제어를 제공하는 최신 터치 컴포넌트로 다양한 상태와 조건을 다루기 위해 
  만들어짐
- 터치 가능 영역을 정의하는 컴포넌트로 사용자가 터치, 길게 누름, 눌렀다 뗌 등의 여러 이벤트를 
  처리할 수 있음
- 각 이벤트에 따른 다양한 콜백 함수를 제공해 더 세밀하게 터치 상호작용을 제어할 수 있음

주요 이벤트와 콜백함수
onPress : 눌렀다 뗐을 때 호출
onPressIn : 누르는 순간 호출
onPressOut : 눌렀다 떼는 순간 호출
onLongPress : 사용자가 지정된 시간 이상 길게 눌렀을 때 호출

자식 컴포넌트로 데이터를 전달하는 방식
1. 부모 컴포넌트에서 자식 컴포넌트를 사용하면서 속성으로 props를 전달하는 방법
2. 컴포넌트의 태그 사이에 값을 입력해서 전달하는 방법


defaultProps
만약 사용해야 하는 값이 전달되지 않았다면 기본으로 사용되는 값
여러 사람과 개발을 하면 내가 만든 컴포넌트를 다른사람이 사용하는 경우가 많음
이런 상황에서 컴포넌트를 잘못 파악해 반드시 전달되어야 하는 중요한 값이 전달되지 않았을 때
기본값을 지정하면 만약의 사태에 빈 값이 나타나는 상황을 막을 수 있음

propsTypes
프로젝트의 크기가 커지면서 컴포넌트에 props를 전달할 때 잘못된 타입으로 전달하거나, 필수로
전달해야 하는 값을 전달하지 않아서 문제가 생길 수 있음
혹은 협업하는 다른 개발자가 잘못 전달할 수도 있음
이런 상황에서 잘못된 props가 전달되었다는 것을 경고 메시지를 통해 알리는 방법으로
propsTypes를 사용하는 방법이 있음

최신 React-Native환경에서는 작동을 안할 수 있음

state
props는 부모 컴포넌트에서 받은 값을 변경할 수 없는 반면에 state는 컴포넌트 내부에서 생성되고 값을
변경할 수 있으며 이를 이용해 컴포넌트 상태를 관리함
상태(state)란 컴포넌트에서 변화할 수 있는 값을 나타내며 상태가 변하면 컴포넌트는 재렌더링이 일어남

useState
리액트 Hook중 useState는 함수형 컴포넌트에서 상태를 관리할 수 있도록 해줌

useState()를 실행하고나면 변수와 변수의 값을 변경할 수 있는 함수를 배열로 반환함
상태변수는 직접 변경하는 것이 아니라 useState에서 반환한 setter함수를 이용해야함
useState함수를 호출할 때 파라미터에 생성되는 상태의 초기값을 전달할 수 있고,
초기값을 전달하지 않으면 undefined로 설정되어 에러가 발생할 수 있음


이벤트 처리
React-Native에는 사용자의 행동에 따라 상호작용하는 이벤트를 다양하게 제공함
많은 종류의 이벤트가 존재하고 컴포넌트가 하는 역할에 따라 제공되는 이벤트도 약간씩 차이가 있음

Press 이벤트
React-Native에서 onClick이벤트와 가장 비슷한 이벤트는 Press 이벤트임
버튼을 만들 때 Pressable 컴포넌트에서 설정할 수 있는 Press이벤트의 종류는 4가지임
onPress : 눌렀다 뗐을 때 호출
onPressIn : 누르는 순간 호출
onPressOut : 눌렀다 떼는 순간 호출
onLongPress : 사용자가 지정된 시간 이상 길게 눌렀을 때 호출

버튼 클릭시
onPressIn -> onPress -> onPressOut

버튼을 꾹 누르고 있을시
onPressIn -> onLongPress -> onPressOut

onPress와 onLongPress는 사용자가 클릭하는 시간에 따라 둘 중 하나면 호출이 됨
만약 onLongPress가 호출되는 시간을 조절하고 싶다면,
delayLongPress속성을 주면 됨

change 이벤트
변화를 감지하는 change 이벤트는 값을 입력하는 TextInput컴포넌트에서 많이 사용됨

onChangeText  
컴포넌트의 텍스트가 변경되었을 때 변경된 텍스트의 문자열만 인수로 전달하여 호출됨

Pressable 컴포넌트
사용자의 터치에 상호작용하는 컴포넌트
우리는 모바일 환경에서 작은화면에 버튼을 포함하여 다양한 요소들을 보여줌
화면이 작은 만큼 버튼도 작아지는데 손가락이 크거나 두꺼운 사람들은 
버튼을 정확하게 클릭하는 것이 어려울 수 있음
이런 상황을 해결하기 위해 많은 개발자들이 버튼 모양보다 약간 떨어진 부분까지 이벤트가 
발생할 수 있도록 조치하고 있음

Pressable컴포넌트는 HitReact를 이용해 이러한 설정을 할 수 있음


스타일링

1. 인라인 스타일링
HTML의 인라인 스타일링 처럼 컴포넌트에 직접 스타일을 입력하는 방식
다만 HTML에서는 문자열 형태로 스타일을 입력하지만 React-Native에서는 객체형태로 전달해야 
하는 차이점이 있음

클래스 스타일링
- 컴포넌트의 태그에 직접 입력하는 방식이 아니라 스타일시트에 정의된 스타일을 사용하는 방법
- 웹에서 css클래스를 이용하는 방법과 유사함

StyleSheet
- React-Native의 내장 객체로 화면에 표시될 요소들의 디자인을 지정하는 역할을 함
- 모바일 환경에서 동작하기 때문에 웹 처럼 CSS스타일을 작성하는 방식은 비효율적일 수 있음
- StyleSheet를 사용하면 코드의 성능이 개선되고 스타일을 체계적으로 관리할 수 있게 됨

StyleSheet.create메서드를 호출해 스타일을 정의함
이 메서드를 통해 스타일을 객체 형태로 작성할 수 있음

외부 스타일 시트 이용하기
상황에 따라 외부 파일에 스타일을 정의하고 여러개의 파일에서 스타일을 공통으로 사용하는 
경우가 있음

리액트 네이티브 스타일
- React-Native에는 많은 종류의 스타일 속성들이 있음
- 그중에는 특정 플랫폼에서만 적용되는 스타일도 있고, 웹 프로그래밍에서 사용해본 
  익숙한 속성들도 있음

React-Native에서도 요소의 너비와 높이를 정할 때 width와 height를 설정할 수 있음
- Header와 Footer 컴포넌트의 높이를 80으로 하고 Contents컴포넌트가 나머지 영역을 차지하도록
  구성하고 싶으면 어떻게 해야하나?

Platform
앱이 실행되는 운영체제에 따라 다른코드를 실행할 수 있게 도와주는 도구

1. Platform.OS
현재 실행중인 플랫폼을 알려주는 값

2. Platform.select
운영체제별로 서로 다른 값을 쉽게 설정할 수 있게 해줌

styled-components
자바 스크립트 파일안에 스타일을 작성하는 CSS-in-JS라이브러리 이며 스타일이 적용된 컴포넌트
npm install styled-components --legacy-peer-deps

'--force': 모든 충돌을 무시하고 강제로 최신버전 설치
'--legacy-peer-deps ' : npm7에서 peer dependencies라는 새로운 기능이 나옴
		     버전에 충돌이 일어나는 경우 에러로 판단해 설치를 중단
		     peerDependencies가 자동으로 설치되는 기능을 무시


백틱(``)안에서 props에 접근할 수 있다는 장점으 이용해 props의 값에 따라 스타일변경을 할수도 있음

styled-component의 사용법
const 컴포넌트명 = styled.View`
	css
`

props를 전달하면 값에 따라 css를 다르게 적용할 수도 있음

attrs사용
스타일드 컴포넌트를 사용하면 스타일을 작성하는 곳에서 컴포넌트의 속성도 설정할 수 있음
그리고 속성을 설정할 때도 전달된 props를 사용할 수 있으므로 props의 값에 따라 속성을 변경할 수 있음

ContextAPI
데이터를 전역으로 관리하기 위해서 사용하는 기능
어플리케이션 전체에서 스타일드 컴포넌트를 이용할 때 미리 정의한 값을 사용할 수 있도록 props로 전달함

스타일드 컴포넌트에서는 ThemeProvider라고 하는 컴포넌트를 제공함 props로 우리가 설정한 테마를 전달

테마를 넘기고 싶은 컴포넌트에 ThemeProvider로 감쌈
<ThemeProvider theme={우리가 만든 테마}>

</ThemeProvider> 

스타일드 컴포넌트를 사용할 때 ThemeProvider를 활용하여 theme를 지정하면 하나의 파일에서 미리 정의해둔
색을 하위 컴포넌트에서 사용할 수 있음
하나의 파일에서 모든 색을 관리하면 색의 사용이나 변경 등 유지보수에서 많은 이점을 얻을 수 있음

Switch컴포넌트
토글 스위치 UI를 만드는 기본 컴포넌트
설정 화면에서 ON/OFF기능을 구현할 때 사용함
주요 props
value : 스위치의 현재 상태 (켜짐 / 꺼짐) boolean
onChangeValue : 스위치 상태가 바뀔 때 실행되는 함수 function
disabled : 스위치 비활성화 여부 boolean



Todo 프로그럄
등록 : 할 일 항목을 추가하는 기능
수정 : 완료되지 않은 할 일 항목을 수정하는 기능
삭제 : 할 일 항목을 삭제하는 기능
완료 : 할 일 항목의 완료 상태를 관리하는 기능

타이틀 만들기
가장 먼저 화면 상단에 TODO List라는 문구가 렌더링 되도록 타이틀을 만들기
App컴포넌트에 스타일드 컴포넌트를 이용해 Title컴포넌트를 만듬

SafeAreaView
아이폰처럼 노치 디자인이 있는 기기는 Title의 일부가 가려지는 것을 볼 수 있음
React-Native에서는 자동으로 padding값이 적용되어 노치 디자인 문제를 해결할 수 있는 
SafeAreaView 컴포넌트를 제공함

StatusBar
배경색을 어려운 색으로 설정하면서 상태바의 내용도 눈에 잘 들어오지 않는다는 문제가 있음
상태바를 변경해 안드로이드에서 Title컴포넌트가 가려지는 문제를 해결하고 어두운 배경에 잘보이도록
스타일을 수정

주요 props
barStyle : default(시스템 기본 스타일), light-content(흰색 글자), dark-content(검은색 글자)
backgroundColor : 배경색(Android전용)

Input컴포넌트 만들기
- TextInput 컴포넌트를 이용해 Input컴포넌트를 만들기
- Input 컴포넌트는 할 일 항목을 추가할 때 뿐만 아니라 등록된 할 일 항목을 수정할 때도 사용할 예정임

Dimensions
기기의 화면 크기나 요소의 크기를 가져오기 위해 사용하는 모듈
앱을 개발할 때 화면 크기를 기준으로 요소를 배치하거나 스타일을 설정해야 할때 Dimensions를 사용하면 화면
크기에 따라 동적으로 레이아웃을 구성할 수 있음

예를 들어, 큰 테블릿 화면과 작은 스마트폰 화면에 같은 크기의 요소를 배치하면 UI가 
비정상적으로 보일 수 있음 이 때, Demensions 모듈을 사용해 현재 기기의 화면과 너비와 높이를 가져와
화면 크기에 따라 적절한 크기와 위치를 설정할 수 있음

이벤트
ㅣㅂ력되는 값을 이용할 수 있도록 Input컴포넌트에 이벤트처리를 해야함

할일 목록 만들기
Input컴포넌트를 통해 입력받은 내용을 목록으로 출력하는 기능 만들기
할 일 목록을 만들기 위해서는 2개의 컴포넌트가 필요함
IconButton: 완료, 수정, 삭제 버튼으로 사용할 컴포넌트
Task : 목록의 각 항목으로 사용할 컴포넌트

아이콘 버튼 컴포넌트를 만들기전에 프로젝트에서 사용할 아이콘이미지를 다운로드 받아야함


완료기능
완료 여부를 선택하는 버튼의 기능을 구현
항목을 완료상태로 만들어도 다시 미완료 상태로 돌아올 수 있도록 완료버튼을 만들기


입력 취소
항목을 추가하거나 수정하는 도중에는 입력을 취소할 방법이 없음
입력중에 다른영역을 클릭해서 Input 컴포넌트가 포커스를 잃으면 입력중인 내용이 사라지고 취소되도록
Input컴포넌트를 수정



AsyncStorage를 이용해서 로컬에 데이터를 저장하고 불러오는 기능을 구현할 수 있음
AsyncStorage는 비동기로 동작하여 문자열로 된 키-값 형태의 데이터를 기기에 저장하고 불러올 수 있는 기능을 제공

key를 이용하여 데이터에 접근하고 값을 불러오거나 저장할 수 있음

비동기 API를 제공하기 때문에 데이터 저장과 로딩이 메인 스레드를 차단하지 않음

사용자 설정
테마, 언어, 알림설정 같은 개인화 옵션을 저장하고 불러올 때 유용

세션 관리
인증 토큰이나 사용자 상태를 저장해 로그인 상태를 유지할 때 사용할 수 있음

앱 초기화 상태
사용자가 앱을 처음 열 때 실행되는 초기 설정이나 튜토리얼 진행 상태 등을 저장할 수 있음

간단한 데이터 캐싱
네트워크 데이터를 캐싱하거나 오프라인 상태에서 사용할 간단한 데이터를 저장할 수 있음


AsyncStroage
앱 내에 데이터를 로컬에 영구적으로 저장할 수 있도록 해주는 비동기 저장소 시스템

리액트 할 때 로그인하면 토큰을 반환받고 localStorage에 저장한 것과 비슷한 시스템

AsyncStorage는 비동기로 작동하고 JSON기반으로 key-value형태로 데이터를 저장함

언제 사용하나?
사용자가 로그인 한 상태를 유지하고 싶을 때
최근 검색어, 설정값, 토글 상태 등을 기억하고 싶을 때


value에 넣을 때 JSON.stringify로 변환을 해서 저장
setItem(key, value)

const user = {
	id : 1,
	name : 'name'
}
await AsyncStorage.setItem('user', JSON.stringfy(user));

실제 저장되는 내용은
key : user
value : "{\"id\":1,\"name\":\"name\"}"

저장된 데이터를 확인하는 법
getItem(key)

const data = await AsyncStorage.getItem(key)

저장된 전체 key불러오기
const keys = await AsyncStorage.getAllKey()


화살표 함수는 쓰는 이유
1. 즉시 호출 방지
컴포넌트가 렌더링 될 때 setCount(count +1이 즉시 실행되어 onPress이벤트가 발생할 때가 아닌 
렌더링 시점에 setCount가 호출됨

2. this 바인딩 문제 해결
리액트 클래스 컴포넌트에서는 일반적으로 이벤트 핸들러에 this가 현재 컴포넌트를 참조하도록 사용했어야 함

useState의 상태 저장 및 변경
상태는 컴포넌트가 재렌더링될 때 유지가 됨
상태 변경함수를 사용하면 컴포넌트가 자동으로 재렌더링됨

상태 변경 함수는 비동기적으로 동작함
변경 직후의 state값을 바로 읽으면, 여전히 이전 값일수도 있음
상태 변경 함수는 즉시 상태를 변경하는 것이 아니라, React가 다음 렌더링 타이밍에 상태를 변경하고 
컴포넌트를 다시 렌더링함

React는 성능 최적화를 위해, 여러개의 setCount(count+1)가 호출이 될 때 하나의 렌더링 사이클로 
묶어서 처리함 
일괄 업데이트(batch update)
setCount(count+1)
setCount(count+1)
setCount(count+1)
이렇게 3번을 호출해도 실제로는 한 번만 렌더링됨

이전 상태 값이 꼭 필요한 경우 반드시 함수형 업데이트를 사용해야 함
setCount(prev => prev+1)
setCount(prev => prev+1)
setCount(prev => prev+1)


useRef
특정 DOM요소나 값의 변화를 추적하거나 유지할 때 사용되는 객체를 반환해주는 역할
DOM요소에 접근하기 위해 사용하거나, 재렌더링 없이 상태를 유지할 때 사용하는 경우가 많음

주요특징
- 초기값 유지
  useRef의 초기값은 컴포넌트가 마운트될 때 한 번만 설정되며 이후에는 유지됨
- 재렌더링 없이 값 유지
  useRef의 값이 바뀌어도 컴포넌트는 재렌더링되지 않으므로 값의 변경이 UI에 즉각적인 영향을 
  주지 않아야할 때 유용함
- DOM에 접근
  컴포넌트의 특정 DOM요소에 접근할 때 사용할 수 있음
  주로 INPUT, BUTTON 등 특정 DOM요소에 직접 접근해 포커스를 설정하거나, 요소의 값을 직접 조작할 때 
  사용됨


const ref = useRef(초기값)


useMemo
메모이제이션을 통해 특정 연산의 결과를 저장해두고 불필요한 반복 계산을 피하도록 도와줌
이 훅은 복잡한 계산이 매번 다시 이루어지지 않도록 최적화하는 역할을 하며 의존성 배열에 따라 값이
바뀔때만 연산이 다시 수행되도록 설정할 수 있음

메모이제이션이란 같은 계산을 반복해야할 때 그 결과를 저장해두고 다시 필요할 때 저장된 값을 꺼내 
사용하는 기법

반복적으로 동일한 연산을 수행하지 않아도 되어, 성능이 크게 향상됨
useMemo가 이 메모이제이션을 사용할 수 있도록 지원하는 훅임

동작 방식
useMemo는 특정 계산의 결과를 기억하고 있다가 다음에 해당 계산이 필요할 때 의존하는 값이 바뀌지 않으면
이전 결과를 그대로 반환함

useMemo(() => {}, []);

첫번째 인자(값을 계산하는 로직)
결과적으로 return값이 memoizedValue에 저장됨
계산 비용이 크거나 복잡한 로직을 여기에 작성함

두번째 인자는 의존성 배열
이 배열 안의 값 중 하나라도 변경되면, 첫 번째 함수가 실행됨
이 배열이 변하지 않으면 이전에 계산된 값을 재사용함

의존성 배열을 비워두면 마운트시 한번 계산하고 끝이나기 때문에 오류 발생 가능성이 있음
반드시 의존하는 값은 두번째 인자에 포함시켜야함


커스텀 hook 만들기
우리가 만들 hook함수는 API에 GET요청을 보내고 응답을 받는 함수
리액트 네이티브에서는 네트워크 통신을 위해 fetch, axios를 제공하고 추가적으로 WebSocket도 지원함

이번에는 fetch를 이용해 useFetch라는 이름의 hook을 만듬