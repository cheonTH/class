0리액트 네이티브
리액트 기반의 모바일 어플리케이션 개발 프레임워크
JSX, 컴포넌트 기반
한 번만 작성하면 안드로이드, IOS 둘다 확인 가능

프로젝트를 만들 때는 expo를 활용

npm install -g expo-cli -> expo설치

expo init 프로젝트명 -> 프로젝트 생성

npx expo start  ||   npm start  -> 프로젝트 실행

CLI(Commend-Line-Interface): 사용자가 컴퓨터에게 명령을 입력하여 상호작용하는 방식


JSX문법
여러개의 태그는 반드시 하나로 묶어야 함
React-Native는 <div>역할을 하는 <View>라는 컴포넌트가 있음
Fragment를 써도 됨
if문 가능, 3항 연산자 가능
&& : 앞의 조건이 참이면 뒤의 조건을 렌더링 함
|| : 앞의 조건이 거짓이면 뒤의 조건을 렌더링 함

null과 undefined
- 조건에 따라 출력하는 값을 변경하다보면 컴포넌트가 null이나 undefined를 반환하는 경우가 있음

JSX의 경우 null은 허용하지만 undefined는 오류가 발생함

스타일링
인라인 스타일링
- JSX에서는 HTML과는 달리 style에 문자열로 입력하는 것이 아닌 객체 형태로 입력해야함
- 속성은 카멜표현식으로 작성해야함


컴포넌트
- 재사용이 가능한 조립블록
- ui의 조각
- 컴포넌트는 단순히 UI의 역할만 하는 것이 아니라 부모로부터 받은 속성(props)나 자신의 상태(state)에 따라
  달라지고 다양한 기능을 수행함
- 리액트 네이티브는 데이터와 UI 요소의 집합체라고 할 수 있는 컴포넌트를 이용하여 화면을 구성함

특징
독립적임
- 컴포넌트는 다른 코드와 독립적으로 동작함
- 한 곳에서 수정해도 다른 부분에 영향을 주지 않음
- 한 번 작성한 컴포넌트를 여러곳에서 사용할 수 있음
- 예를 들어, 앱에서 같은 스타일의 버튼이 필요하다면 버튼 컴포넌트를 만들어 원하는 곳에서 재사용할 수 있음

유지보수가 용이함
- 화면의 각 부분을 작은 컴포넌트로 분리하여 만들기 때문에 필요한 부분만 수정할 수 있음

가독성 증가
- 코드가 잘게 나누어지기 때문에 이해하기 쉽고 코드관리가 수월함


내장 컴포넌트
- 리액트 네이티브에서는 다양한 내장 컴포넌트들이 제공됨

View와 Text
View
- 가장 기본적인 레이아웃 컴포넌트, HTML의 <div>와 유사한 역할을 함
- 화면에 여러 요소를 그룹화하거나 레이아웃을 구성할 때 사용됨

Text
- 텍스트를 표시할 때 사용하는 컴포넌트
- <p>, <span>과 비슷하며 React-Native에서 텍스트를 표시할 때 필수적으로 사용됨

Button
- React-Native에서 사용하는 버튼을 만들어주는 컴포넌트 
- 설정할 수 있는 속성들이 있음
-- title: 버튼에 쓰이는 문구
-- onPress : 클릭 이벤트
-- color속성 : IOS에서는 텍스트의 색 안드로이드에서는 버튼의 배경색을 나타내는 값
-- ScrollView : 스크롤이 가능한 뷰를 만들 때 사용하는 컴포넌트

커스텀 컴포넌트 만들기
- React-Native에서 다양한 컴포넌트를 제공하고 있지만 프로젝트를 진행하다보면 여러 컴포넌트를 조합해서
  새로운 컴포넌트를 제작하여 사용하게 됨
- React-Native에서 제공하는 컴포넌트들을 이용해서 커스텀 컴포넌트를 만들 수 있음

- Pressable과 Text 컴포넌트를 이용해서 MyButton컴포넌트를 만들 수 있음

Pressable컴포넌트
- 터치 이벤트에 대한 더 세부적인 제어를 제공하는 최신 터치 컴포넌트로 다양한 상태와 조건을 다루기 위해 
  만들어짐
- 터치 가능 영역을 정의하는 컴포넌트로 사용자가 터치, 길게 누름, 눌렀다 뗌 등의 여러 이벤트를 
  처리할 수 있음
- 각 이벤트에 따른 다양한 콜백 함수를 제공해 더 세밀하게 터치 상호작용을 제어할 수 있음

주요 이벤트와 콜백함수
onPress : 눌렀다 뗐을 때 호출
onPressIn : 누르는 순간 호출
onPressOut : 눌렀다 떼는 순간 호출
onLongPress : 사용자가 지정된 시간 이상 길게 눌렀을 때 호출

자식 컴포넌트로 데이터를 전달하는 방식
1. 부모 컴포넌트에서 자식 컴포넌트를 사용하면서 속성으로 props를 전달하는 방법
2. 컴포넌트의 태그 사이에 값을 입력해서 전달하는 방법


defaultProps
만약 사용해야 하는 값이 전달되지 않았다면 기본으로 사용되는 값
여러 사람과 개발을 하면 내가 만든 컴포넌트를 다른사람이 사용하는 경우가 많음
이런 상황에서 컴포넌트를 잘못 파악해 반드시 전달되어야 하는 중요한 값이 전달되지 않았을 때
기본값을 지정하면 만약의 사태에 빈 값이 나타나는 상황을 막을 수 있음

propsTypes
프로젝트의 크기가 커지면서 컴포넌트에 props를 전달할 때 잘못된 타입으로 전달하거나, 필수로
전달해야 하는 값을 전달하지 않아서 문제가 생길 수 있음
혹은 협업하는 다른 개발자가 잘못 전달할 수도 있음
이런 상황에서 잘못된 props가 전달되었다는 것을 경고 메시지를 통해 알리는 방법으로
propsTypes를 사용하는 방법이 있음

최신 React-Native환경에서는 작동을 안할 수 있음

state
props는 부모 컴포넌트에서 받은 값을 변경할 수 없는 반면에 state는 컴포넌트 내부에서 생성되고 값을
변경할 수 있으며 이를 이용해 컴포넌트 상태를 관리함
상태(state)란 컴포넌트에서 변화할 수 있는 값을 나타내며 상태가 변하면 컴포넌트는 재렌더링이 일어남

useState
리액트 Hook중 useState는 함수형 컴포넌트에서 상태를 관리할 수 있도록 해줌

useState()를 실행하고나면 변수와 변수의 값을 변경할 수 있는 함수를 배열로 반환함
상태변수는 직접 변경하는 것이 아니라 useState에서 반환한 setter함수를 이용해야함
useState함수를 호출할 때 파라미터에 생성되는 상태의 초기값을 전달할 수 있고,
초기값을 전달하지 않으면 undefined로 설정되어 에러가 발생할 수 있음


이벤트 처리
React-Native에는 사용자의 행동에 따라 상호작용하는 이벤트를 다양하게 제공함
많은 종류의 이벤트가 존재하고 컴포넌트가 하는 역할에 따라 제공되는 이벤트도 약간씩 차이가 있음

Press 이벤트
React-Native에서 onClick이벤트와 가장 비슷한 이벤트는 Press 이벤트임
버튼을 만들 때 Pressable 컴포넌트에서 설정할 수 있는 Press이벤트의 종류는 4가지임
onPress : 눌렀다 뗐을 때 호출
onPressIn : 누르는 순간 호출
onPressOut : 눌렀다 떼는 순간 호출
onLongPress : 사용자가 지정된 시간 이상 길게 눌렀을 때 호출

버튼 클릭시
onPressIn -> onPress -> onPressOut

버튼을 꾹 누르고 있을시
onPressIn -> onLongPress -> onPressOut

onPress와 onLongPress는 사용자가 클릭하는 시간에 따라 둘 중 하나면 호출이 됨
만약 onLongPress가 호출되는 시간을 조절하고 싶다면,
delayLongPress속성을 주면 됨

change 이벤트
변화를 감지하는 change 이벤트는 값을 입력하는 TextInput컴포넌트에서 많이 사용됨

onChangeText  
컴포넌트의 텍스트가 변경되었을 때 변경된 텍스트의 문자열만 인수로 전달하여 호출됨

Pressable 컴포넌트
사용자의 터치에 상호작용하는 컴포넌트
우리는 모바일 환경에서 작은화면에 버튼을 포함하여 다양한 요소들을 보여줌
화면이 작은 만큼 버튼도 작아지는데 손가락이 크거나 두꺼운 사람들은 
버튼을 정확하게 클릭하는 것이 어려울 수 있음
이런 상황을 해결하기 위해 많은 개발자들이 버튼 모양보다 약간 떨어진 부분까지 이벤트가 
발생할 수 있도록 조치하고 있음

Pressable컴포넌트는 HitReact를 이용해 이러한 설정을 할 수 있음


스타일링

1. 인라인 스타일링
HTML의 인라인 스타일링 처럼 컴포넌트에 직접 스타일을 입력하는 방식
다만 HTML에서는 문자열 형태로 스타일을 입력하지만 React-Native에서는 객체형태로 전달해야 
하는 차이점이 있음

클래스 스타일링
- 컴포넌트의 태그에 직접 입력하는 방식이 아니라 스타일시트에 정의된 스타일을 사용하는 방법
- 웹에서 css클래스를 이용하는 방법과 유사함

StyleSheet
- React-Native의 내장 객체로 화면에 표시될 요소들의 디자인을 지정하는 역할을 함
- 모바일 환경에서 동작하기 때문에 웹 처럼 CSS스타일을 작성하는 방식은 비효율적일 수 있음
- StyleSheet를 사용하면 코드의 성능이 개선되고 스타일을 체계적으로 관리할 수 있게 됨

StyleSheet.create메서드를 호출해 스타일을 정의함
이 메서드를 통해 스타일을 객체 형태로 작성할 수 있음

외부 스타일 시트 이용하기
상황에 따라 외부 파일에 스타일을 정의하고 여러개의 파일에서 스타일을 공통으로 사용하는 
경우가 있음

리액트 네이티브 스타일
- React-Native에는 많은 종류의 스타일 속성들이 있음
- 그중에는 특정 플랫폼에서만 적용되는 스타일도 있고, 웹 프로그래밍에서 사용해본 
  익숙한 속성들도 있음

React-Native에서도 요소의 너비와 높이를 정할 때 width와 height를 설정할 수 있음
- Header와 Footer 컴포넌트의 높이를 80으로 하고 Contents컴포넌트가 나머지 영역을 차지하도록
  구성하고 싶으면 어떻게 해야하나?

Platform
앱이 실행되는 운영체제에 따라 다른코드를 실행할 수 있게 도와주는 도구

1. Platform.OS
현재 실행중인 플랫폼을 알려주는 값

2. Platform.select
운영체제별로 서로 다른 값을 쉽게 설정할 수 있게 해줌